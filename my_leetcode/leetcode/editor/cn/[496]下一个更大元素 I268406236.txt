class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        /**
         * 倒序遍历nums_2并用单调栈中维护当前位置右边的更大的元素列表，从栈底到栈顶的元素是单调递减的。
         * 移动到数组中一个新的位置 i，就将当前单调栈中所有小于 nums_2[i]的元素弹出单调栈，
         * 当前位置右边的第一个更大的元素即为栈顶元素，如果栈为空则说明当前位置右边没有更大的元素。
         * 随后我们将位置 i 的元素入栈。
         */
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        Deque<Integer> stack = new ArrayDeque<Integer>();
        for (int i = nums2.length - 1; i >= 0; --i) {
            int num = nums2[i];
            while (!stack.isEmpty() && num >= stack.peek()) {
                stack.pop();
            }
            map.put(num, stack.isEmpty() ? -1 : stack.peek());
            stack.push(num);
        }
        int[] res = new int[nums1];
        for (int i = 0; i < nums1.length; i++) {
            res[i] = map.get(nums1[i]);
        }
        return res;
    }
}

//total_correct:0
//compile_error:Line 19: error: incompatible types: int[] cannot be converted to int
        int[] res = new int[nums1];
                            ^
