<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Tomding's Blog</title><link>/post/</link><description>Recent content in Posts on Tomding's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 01 Jan 2023 14:28:53 +0800</lastBuildDate><atom:link href="/post/rss.xml" rel="self" type="application/rss+xml"/><item><title>code-adb</title><link>/post/code-adb/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-adb/</guid><description>[TOC] ubuntu安装adb 卸载内置手机软件 adb devices 查看已连接的设备 adb shell pm list packages &amp;gt; a.txt 显示所有应用 adb shell pm uninstall &amp;ndash;user 0 com.miui.contentextension 传送门 adb shell pm uninstall &amp;ndash;user 0 com.android.browser 浏览器 adb shell pm uninstall &amp;ndash;user 0 com.miui.voicetrigger</description></item><item><title>code-autojs</title><link>/post/code-autojs/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-autojs/</guid><description>手册 首页Auto.js auto(); setScreenMetrics(1080, 1920); launchApp(&amp;#34;抖音极速版&amp;#34;); customsleep(getRandom(4)); while(true){ swipe(5001700,500180,500) customsleep( getrandom(4))j //if(getrandom(10)&amp;gt;5)0 comment() } function comment(){ C1ick(1023,1390); while(j++&amp;lt;3){ swipe(500,1650,500,1000,500); customSleep(getRandom(3)); } c1ick(500,1860); id(&amp;#34;pt&amp;#34;).findOne().setText(&amp;#34;1111&amp;#34;); cstomsleep(1); id(&amp;#34;q4&amp;#34;).findOne().click(); customSleep(3); back(); customSleep(5); } ## 体眠函数 @</description></item><item><title>code-bat</title><link>/post/code-bat/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-bat/</guid><description>2&amp;gt;nul 是屏蔽操作失败显示的信息，如果成功依旧显示。 &amp;gt; nul 是屏蔽操作成功显示的信息，但是出错还是会显示(即1&amp;gt;nul) pause 它会提示“请按任意键继</description></item><item><title>code-c++</title><link>/post/code-c++/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-c++/</guid><description>C++基础入门 1 C++初识 1.1 第一个C++程序 编写一个C++程序总共分为4个步骤 创建项目 创建文件 编写代码 运行程序 1.1.1 创建项目 ​ Visual Studio是我</description></item><item><title>code-ccs</title><link>/post/code-ccs/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-ccs/</guid><description>​ CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称. ​ CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离 css语法规范 CSS 规则由两</description></item><item><title>code-element</title><link>/post/code-element/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-element/</guid><description>el-table 记住选中状态 1.el-table加上行唯一id :row-key=&amp;#34;(row) =&amp;gt; row.id&amp;#34; 注：id是该行唯一值 2.在选项列中加上 :reserve-selection=&amp;#34;true&amp;#34; 3.在完成后，需要清空选中的this.$ref</description></item><item><title>code-flask</title><link>/post/code-flask/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-flask/</guid><description>from flask import Flask App = Flask(__name__) @App.route(&amp;#39;/&amp;#39;) def index(): return&amp;#34;hello world&amp;#34; if __name__ == &amp;#34;__main__&amp;#34;: App.run(debug=True)</description></item><item><title>code-git</title><link>/post/code-git/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-git/</guid><description>Git Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。 Git管理的是修改，而不是文件 工作区（Working Directory）</description></item><item><title>code-html</title><link>/post/code-html/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-html/</guid><description>Web 标准提出的最佳体验方案：结构、样式、行为相分离。 简单理解：结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中 HTML语法规则： HTML 标签通常</description></item><item><title>code-javascripts</title><link>/post/code-javascripts/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-javascripts/</guid><description>输出 这是一个输入框 var age = prompt(&amp;lsquo;请输入您的年龄&amp;rsquo;); alert 弹出警示框 输出的 展示给用户的 alert(&amp;lsquo;</description></item><item><title>code-markdwon</title><link>/post/code-markdwon/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-markdwon/</guid><description>生成目录 [TOC] [TOC] To Do List - [x] 学习python基础 【减号+[+空格或x+]+空格】 - [ ] 学习python网络编程 横线 --- 删除线 ~~哈哈~~ 哈哈 列表点号</description></item><item><title>code-matplot</title><link>/post/code-matplot/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-matplot/</guid><description>柱形图 主要用于比较各组数据之间的差别或数据变化情况。 折线图 趋势分析 饼图 主要用于各部分占整体的多少说明。 散点图 查找变量之间的相关性。 雷达图 各项</description></item><item><title>code-numpy</title><link>/post/code-numpy/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-numpy/</guid><description>生成随机数 随机数种子 np.random.seed(42) 设置显示小数点后两位 np.set_printoptions(precision=2) 产生元素为0到1，大小为4*3的随机数据矩阵 np.random.rand(4,3) 元素由标准正态分布产生，大小为4*3的随机数矩阵 np.random.randn(4,3)</description></item><item><title>code-pandas</title><link>/post/code-pandas/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-pandas/</guid><description>import pandas as pd a = [1, 2, 3, 4] p = [1, 2, 3, 4] r = [1, 2, 3, 4] f = [1, 2, 3, 4] df = pd.DataFrame({&amp;#39;a&amp;#39;:a, &amp;#39;p&amp;#39;:p, &amp;#39;r&amp;#39;:r, &amp;#39;f&amp;#39;:f}, index=[&amp;#39;LSTM_FCN&amp;#39;, &amp;#39;LSTM_MCNN&amp;#39;, &amp;#39;BiLSTM_FCN&amp;#39;,&amp;#39;BiLSTM_MCNN&amp;#39;]) print(df) df.to_csv(&amp;#34;./result/result.csv&amp;#34;, index=True) result = all_metric(y_trues, y_preds, method_name=method_name) df = pd.read_csv(&amp;#39;./result/result.csv&amp;#39;, index_col=0) df.loc[method_name] = result print(df) df.to_csv(&amp;#34;./result/result.csv&amp;#34;, index=True) plot＿confusion_</description></item><item><title>code-pytest</title><link>/post/code-pytest/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-pytest/</guid><description>执行命令 测试文件以 test_ 开头（以 _test 结尾也可以） 测试类以 Test 开头，并且不能带有 init 方法 测试函数以 test_ 开头 断言使用基本的 assert 即可 #!/usr/bin/env python # -*- coding: utf-8 -*- def add(x, y): return x + y</description></item><item><title>code-python</title><link>/post/code-python/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-python/</guid><description>Python是解释型语言，Python运行前不需要编译。动态类型的，这意味着你不需要在声明变量时指定类型 == 比较值，is比较ID(内存地址） a</description></item><item><title>code-seaborn</title><link>/post/code-seaborn/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-seaborn/</guid><description>import seaborn as sns %matplotlib inline sns.set(font_scale=1.5,style=&amp;#34;white&amp;#34;) sns.set_style(&amp;#39;white&amp;#39;,{&amp;#39;font.sans-serif&amp;#39;:[&amp;#39;simhei&amp;#39;,&amp;#39;Arial&amp;#39;]}) # 本次试用的数据集是Seaborn内置的tips小费数据集： data=sns.load_dataset(&amp;#34;tips&amp;#34;) data.head(5) kdeplot(核密度估计图) 核密度估计(kernel density es</description></item><item><title>code-selenium</title><link>/post/code-selenium/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-selenium/</guid><description>各个浏览器驱动下载地址： https://code.google.com/p/selenium/downloads/list 安装 chrome 浏览器驱动，下载 ChromeDriver_win32.zip(根据自己系统下载不同的版本驱动)，解压 得到 chromedriver.exe 文</description></item><item><title>code-Spark</title><link>/post/code-spark/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-spark/</guid><description>Spark **Spark是一款分布式内存计算的统一分析引擎。其特点就是对任意类型的数据进行自定义计算。**Spark的适用面非常广泛，所以，被称之为</description></item><item><title>code-vue</title><link>/post/code-vue/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-vue/</guid><description>下载Node.js并安装 首先上Node.js官网找到了本机操作系统对应的Node.js版本进行了安装包的下载。 官网：https://node</description></item><item><title>code-词云</title><link>/post/code-%E8%AF%8D%E4%BA%91/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-%E8%AF%8D%E4%BA%91/</guid><description># 挖掘客户意见 import re import collections import pandas as pd import jieba from wordcloud import WordCloud from gensim import corpora, models import matplotlib.pyplot as plt import requests # --------------------爬取短评数据 # for i in range(0,200,20): # # 通过浏览</description></item><item><title>code-调用百度api进行ocr</title><link>/post/code-%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6api%E8%BF%9B%E8%A1%8Cocr/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6api%E8%BF%9B%E8%A1%8Cocr/</guid><description>pip install baidu-aip from PIL import Image from PIL import ImageGrab import keyboard import time from aip import AipOcr # 1.截图 keyboard.wait(hotkey=&amp;#34;ctrl+d&amp;#34;) # 输入键盘的触发事件 keyboard.wait(hotkey=&amp;#34;ctrl+c&amp;#34;) time.sleep(0.1) # 2.保存图片 image = ImageGrab.grabclipboard() # 把图片从剪切板保存到当前路径 image.save(&amp;#34;screen.png&amp;#34;) # 3.识别图片</description></item><item><title>code-正则表达式</title><link>/post/code-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/code-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>()内的内容表示的是一个子表达式，()本身不匹配任何东西，也不限制匹配任何东西，只是把括号内的内容作为同一个表达式来处理，例如(ab){1,</description></item><item><title>cv-trtpy</title><link>/post/cv-trtpy/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/cv-trtpy/</guid><description>pip install trtpy -U trtpy set-key xxx trtpy get-env trtpy get-cpp-pkg opencv4.2 &amp;gt;trtpy --help usage: __main__.py [-h] {get-env,info,mnist-test,exec,list-templ,search-templ,get-templ,list-series,search-series,get-series,change-proj,series-detial,prep-vars,inv-vars,compile,tryload,env-source,local-cpp-pkg,get-cpp-pkg} ... positional arguments: {get-env,info,mnist-test,exec,list-templ,search-templ,get-templ,list-series,search-series,get-series,change-proj,series-detial,prep-vars,inv-vars,compile,tryload,env-source,local-cpp-pkg,get-cpp-pkg} get-env download environment info display support list mnist-test test tensorrt with mnist exec same to ./trtexec list-templ display all code template search-templ search all code template get-templ fetch code template list-series display all series template search-series search all series template get-series fetch series template change-proj change series proj</description></item><item><title>docker-docker</title><link>/post/docker-docker/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/docker-docker/</guid><description># 文章标题 title: &amp;quot;docker-Docker命令&amp;quot; # 分类 categories: - docker # 发表日期 date: 2022-12-02T02:11:14+08:00 Docekr安装torch #安装 SSH，并配置免</description></item><item><title>other-cmder</title><link>/post/other-cmder/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-cmder/</guid><description>快捷键 ctr + r 历史命令搜索 alias config文件夹下文件添加 集成到ide pycharm termal页面shell path &amp;#34;cmd.exe&amp;#34; /k &amp;#34;&amp;#34;C:\software\cmder\vendor\init.bat&amp;#34;&amp;#34; vscode settingjson添加 { &amp;#34;terminal.integrated.shell.windows&amp;#34;: &amp;#34;cmd.exe&amp;#34;, &amp;#34;terminal.integrated.shellArgs.windows&amp;#34;: [</description></item><item><title>other-Colab</title><link>/post/other-colab/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-colab/</guid><description>自动连接 浏览器检查，console运行 function ClickConnect(){ console.log(“Working”); document.querySelector(“co</description></item><item><title>other-keymap</title><link>/post/other-keymap/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-keymap/</guid><description>chrome 开一个新的标签页【Ctrl+T】 不小心关闭了一个或者多个标签页【Ctrl+Shift+T】 打开的是新的窗口【Ctrl+N】 【Ctrl+Ta</description></item><item><title>other-vscode-远程连接服务器</title><link>/post/other-vscode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-vscode-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>ssh ssh user_name@server_ip -L 127.0.0.1:12345:127.0.0.1:1111 1.安装Remote Development插件 2.点击 远程资源管理器，鼠标移到 SSH TARGETS 点击设置 点击config文件 填写自己的服务器配置</description></item><item><title>other-win10定时任务</title><link>/post/other-win10%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-win10%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description>搜索打开任务计划程序】 之后点击右侧的【创建基本任务】 输入任务名称以及可选的任务描述： 进入启动程序设置界面 # 程序或脚本 D:\software\install\Python3.8\python.exe # 添加参数：py文件路</description></item><item><title>other-Wind10和Ubuntu双系统Ubuntu没有win10引导</title><link>/post/other-wind10%E5%92%8Cubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9Fubuntu%E6%B2%A1%E6%9C%89win10%E5%BC%95%E5%AF%BC/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-wind10%E5%92%8Cubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9Fubuntu%E6%B2%A1%E6%9C%89win10%E5%BC%95%E5%AF%BC/</guid><description>sudo update-grub sudo chmod 777 /boot/grub/grub.cfg sudo grub-mkconfig &amp;gt; /boot/grub/grub.cfg sudo add-apt-repository ppa:danielrichter2007/grub-customizer sudo apt-get update sudo apt-get install grub-customizer sudo update-grub</description></item><item><title>other-Windows命令别名</title><link>/post/other-windows%E5%91%BD%E4%BB%A4%E5%88%AB%E5%90%8D/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-windows%E5%91%BD%E4%BB%A4%E5%88%AB%E5%90%8D/</guid><description>新建bat文件 新建文件cmd_auto.bat , 输入自己需要的常用命令的别名。 @echo off doskey ls=dir /b $* doskey act=activate tensorflow-gpu $* doskey tb=tensorboard --logdir $* doskey pi=pip install $* 修改注册表，使cmd启动时</description></item><item><title>other-搭建v2ray服务</title><link>/post/other-%E6%90%AD%E5%BB%BAv2ray%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-%E6%90%AD%E5%BB%BAv2ray%E6%9C%8D%E5%8A%A1/</guid><description>hax申请 IPv6 to IPv4 - Hax.co.id 有效期7天，提前3天申请延期 安装xui bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh) 设置账号、密码、端口54321 端口映射ipv6-ipv4 3066-&amp;gt;54321 3067-&amp;gt;443 登录 91.134.238.134:3066/xui/ 添加入站</description></item><item><title>other-开题报告-论文</title><link>/post/other-%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A-%E8%AE%BA%E6%96%87/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A-%E8%AE%BA%E6%96%87/</guid><description>写完一定要检查格式。 错别字，是否通顺。 前因后果，逻辑连贯，为什么要这样做。 使用序号使内容清晰有条理 ###论文名称 名称要准确、规范。准确就是论</description></item><item><title>other-考研冲刺注意事项</title><link>/post/other-%E8%80%83%E7%A0%94%E5%86%B2%E5%88%BA%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-%E8%80%83%E7%A0%94%E5%86%B2%E5%88%BA%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid><description>一、考前心理 1.抓紧一切时间大肆搞题海战术 最后几天的大方向不是高精尖冲难题，而是再把最基础的知识过一遍。构建自己知识体系上，根据教材的目录和</description></item><item><title>other-软件添加右键打开</title><link>/post/other-%E8%BD%AF%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/other-%E8%BD%AF%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80/</guid><description>win+R -&amp;gt; regedit 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell 新建项（软件名） 默认值数</description></item><item><title>非线性模型-K近邻算法</title><link>/post/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B-k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B-k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</guid><description>K-Nearest Neighbor 作为一种没有显式训练和学习过程的分类和回归算法，k 近邻在众多有监督机器学习算法中算是一种比较独特的方法。说它独特，是因为 k 近邻不像其他模</description></item><item><title>非线性模型-朴素贝叶斯</title><link>/post/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</guid><description>贝叶斯定理 条件概率： A 在另外一个事件 B 已经发生条件下的发生概率 $P(A|B) = \frac{P(A B)}{P(B)} $ 贝叶斯公式： #####后验概率（新信息出现后的A概率） ＝ 先验概率（A</description></item><item><title>降维-LDA线性判别分析</title><link>/post/%E9%99%8D%E7%BB%B4-lda%E7%BA%BF%E6%80%A7%E5%88%A4%E5%88%AB%E5%88%86%E6%9E%90/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E9%99%8D%E7%BB%B4-lda%E7%BA%BF%E6%80%A7%E5%88%A4%E5%88%AB%E5%88%86%E6%9E%90/</guid><description>LDA模型是什么 LDA可以分为以下5个步骤： 一个函数：gamma函数。 四个分布：二项分布、多项分布、beta分布、Dirichlet分布。 一</description></item><item><title>降维-PCA主成分分析</title><link>/post/%E9%99%8D%E7%BB%B4-pca%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E9%99%8D%E7%BB%B4-pca%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/</guid><description>一个二维向量可以对应二维笛卡尔直角坐标系中从原点出发的一个有向线段。 两个维数相同的向量的内积被定义为： 常见形式：$A·B=|A||B| cos(\alpha)$ A与</description></item><item><title>降维-SVD奇异值分解</title><link>/post/%E9%99%8D%E7%BB%B4-svd%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E9%99%8D%E7%BB%B4-svd%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3/</guid><description/></item><item><title>降维-tSNE(t-分布式随机邻域嵌入)</title><link>/post/%E9%99%8D%E7%BB%B4-tsnet-%E5%88%86%E5%B8%83%E5%BC%8F%E9%9A%8F%E6%9C%BA%E9%82%BB%E5%9F%9F%E5%B5%8C%E5%85%A5/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E9%99%8D%E7%BB%B4-tsnet-%E5%88%86%E5%B8%83%E5%BC%8F%E9%9A%8F%E6%9C%BA%E9%82%BB%E5%9F%9F%E5%B5%8C%E5%85%A5/</guid><description>PCA是一种线性算法。 它不能解释特征之间的复杂多项式关系。 另一方面，t-SNE是基于在邻域图上随机游走的概率分布，可以在数据中找到其结构关系</description></item><item><title>降维-降维</title><link>/post/%E9%99%8D%E7%BB%B4-%E9%99%8D%E7%BB%B4/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E9%99%8D%E7%BB%B4-%E9%99%8D%E7%BB%B4/</guid><description>1. 主成分分析（线性） 2. t-SNE（非参数/非线性） 3.萨蒙映射（非线性） 4.等距映射（非线性） 5.局部线性嵌入(非线性) 6.规范相关分析（非</description></item><item><title>聚类-EM聚类</title><link>/post/%E8%81%9A%E7%B1%BB-em%E8%81%9A%E7%B1%BB/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-em%E8%81%9A%E7%B1%BB/</guid><description>原理 EM 算法是一种求解最大似然估计的方法，通过观测样本，来找出样本的模型参数。 练习 假设我们有 A 和 B 两枚硬币，我们做了 5 组实验，每组实验投掷 10 次</description></item><item><title>聚类-kmeans</title><link>/post/%E8%81%9A%E7%B1%BB-kmeans/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-kmeans/</guid><description>原理 随机从数据集中选择k个点作为我们聚类的中心点； 每个点分配到离它最近的类中心点，就形成了k类。然后重新计算每个类的中心点（比如取各类的均值</description></item><item><title>聚类-SOM神经网络算法</title><link>/post/%E8%81%9A%E7%B1%BB-som%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-som%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AE%97%E6%B3%95/</guid><description>自组织映射（Self Organizing Map，SOM）。蓝色斑点是训练数据的分布，而小白色斑点是从该分布中抽取得到的当前训练数据。首先（左图）SOM节点被任</description></item><item><title>聚类-层次聚类</title><link>/post/%E8%81%9A%E7%B1%BB-%E5%B1%82%E6%AC%A1%E8%81%9A%E7%B1%BB/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-%E5%B1%82%E6%AC%A1%E8%81%9A%E7%B1%BB/</guid><description>1.定义 层次聚类(hierarchical clustering)基于簇间的相似度在不同层次上分析数据，从而形成树形的聚类结构， 层次聚类一般有</description></item><item><title>聚类-高斯混合模型（GMM）的最大期望（EM）聚类</title><link>/post/%E8%81%9A%E7%B1%BB-%E9%AB%98%E6%96%AF%E6%B7%B7%E5%90%88%E6%A8%A1%E5%9E%8Bgmm%E7%9A%84%E6%9C%80%E5%A4%A7%E6%9C%9F%E6%9C%9Bem%E8%81%9A%E7%B1%BB/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-%E9%AB%98%E6%96%AF%E6%B7%B7%E5%90%88%E6%A8%A1%E5%9E%8Bgmm%E7%9A%84%E6%9C%80%E5%A4%A7%E6%9C%9F%E6%9C%9Bem%E8%81%9A%E7%B1%BB/</guid><description>使用高斯混合模型（GMM）做聚类首先假设数据点是呈高斯分布的，相对应K-Means假设数据点是圆形的，高斯分布（椭圆形）给出了更多的可能性。</description></item><item><title>聚类-基于密度的DBSCAN</title><link>/post/%E8%81%9A%E7%B1%BB-%E5%9F%BA%E4%BA%8E%E5%AF%86%E5%BA%A6%E7%9A%84dbscan/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-%E5%9F%BA%E4%BA%8E%E5%AF%86%E5%BA%A6%E7%9A%84dbscan/</guid><description>DBSCAN(Density-Based Spatial Clustering of Applications with Noise，具有噪声的基于密度的聚类方法)是一种很典型的密度聚类算法，和K-Means，BIRCH这些一般只适用于凸样本集的聚类</description></item><item><title>聚类-基于密度的均值漂移聚类</title><link>/post/%E8%81%9A%E7%B1%BB-%E5%9F%BA%E4%BA%8E%E5%AF%86%E5%BA%A6%E7%9A%84%E5%9D%87%E5%80%BC%E6%BC%82%E7%A7%BB%E8%81%9A%E7%B1%BB/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-%E5%9F%BA%E4%BA%8E%E5%AF%86%E5%BA%A6%E7%9A%84%E5%9D%87%E5%80%BC%E6%BC%82%E7%A7%BB%E8%81%9A%E7%B1%BB/</guid><description>均值漂移聚类是基于滑动窗口的算法，来找到数据点的密集区域。这是一个基于质心的算法，通过将中心点的候选点更新为滑动窗口内点的均值来完成，来定位</description></item><item><title>聚类-基于图的图团体检测(Graph-Community-Detection)</title><link>/post/%E8%81%9A%E7%B1%BB-%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E5%9B%BE%E5%9B%A2%E4%BD%93%E6%A3%80%E6%B5%8Bgraph-community-detection/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E5%9B%BE%E5%9B%A2%E4%BD%93%E6%A3%80%E6%B5%8Bgraph-community-detection/</guid><description>当我们的数据可以被表示为网络或图时，可以使用图团体检测方法完成聚类。在这个算法中图团体（graph community）通常被定义为一种顶点(</description></item><item><title>聚类-聚类</title><link>/post/%E8%81%9A%E7%B1%BB-%E8%81%9A%E7%B1%BB/</link><pubDate>Sun, 01 Jan 2023 14:28:53 +0800</pubDate><guid>/post/%E8%81%9A%E7%B1%BB-%E8%81%9A%E7%B1%BB/</guid><description># 定义 按照某个特定标准(如距离)把一个数据集分割成不同的类或簇，使得同一个簇内的数据对象的相似性尽可能大，同时不在同一个簇中的数据对象的差异</description></item><item><title>cv-yolo部署到andriod</title><link>/post/cv-yolo%E9%83%A8%E7%BD%B2%E5%88%B0andriod/</link><pubDate>Sun, 25 Dec 2022 22:46:12 +0800</pubDate><guid>/post/cv-yolo%E9%83%A8%E7%BD%B2%E5%88%B0andriod/</guid><description>下载andriod studio；下载安卓代码 #下载ncnn-yolov5-android源码 git clone https://github.com/nihui/ncnn-android-yolov5 #下载ncnn-android-vulka</description></item><item><title>cv-标注工具和数据集</title><link>/post/cv-%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E5%92%8C%E6%95%B0%E6%8D%AE%E9%9B%86/</link><pubDate>Sun, 18 Dec 2022 15:39:56 +0800</pubDate><guid>/post/cv-%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7%E5%92%8C%E6%95%B0%E6%8D%AE%E9%9B%86/</guid><description>标注工具 EISeg PaddleSeg pip install paddlepaddle pip install eiseg eiseg 启动EISeg后，在右上角选择模型类型。 这里以下载针对通用场景的高精度模型为例hrnet18_ocr64_coco</description></item><item><title>cv-枝剪量化</title><link>/post/cv-%E6%9E%9D%E5%89%AA%E9%87%8F%E5%8C%96/</link><pubDate>Thu, 08 Dec 2022 09:49:29 +0800</pubDate><guid>/post/cv-%E6%9E%9D%E5%89%AA%E9%87%8F%E5%8C%96/</guid><description>MIPS：Million Instructions executed Per Second,每秒执行百万条指令，用来计算同一秒内系统的处理能力，即每秒执行了多少百万条指令。 DMIPS：Dh</description></item><item><title>linux-wsl、深度学习环境安装</title><link>/post/linux-wsl%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 05 Dec 2022 20:43:26 +0800</pubDate><guid>/post/linux-wsl%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid><description>wsl wsl -l #列出所有已安装虚拟机 wsl -l -o #列出网上可用的系统 wsl -t ubuntu #关闭ubuntu wsl --shutdown #关闭所有系统及虚拟机引擎 wsl -d ubuntu #启动ubuntu并进行终</description></item><item><title>cv-车道线检测</title><link>/post/cv-%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/</link><pubDate>Sat, 03 Dec 2022 01:30:21 +0800</pubDate><guid>/post/cv-%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/</guid><description>摄像头主要指标 FOV视场角 视场角越大，信息越多，畸变越大，视场角越小，信息越少，畸变越小 分辨率 一般指像素数，分辨率越高，信息越多，计算速度越</description></item><item><title>dcoker-Docker安装Hadoop</title><link>/post/docker-docker%E5%AE%89%E8%A3%85hadoop/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/docker-docker%E5%AE%89%E8%A3%85hadoop/</guid><description>Docker、Java、Scala、Hadoop、 Hbase、Spark。 集群共有5台机器，主机名分别为 h01、h02、h03、h04、h0</description></item><item><title>linux-Linux命令</title><link>/post/linux-linux%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-linux%E5%91%BD%E4%BB%A4/</guid><description>Ctrl+c 强制中断程序的执行 Ctrl+z 将程序挂起，fg/bg继续任务 Ctrl+d 键盘输入结束或退出终端 Ctrl+s 中断控制台输出 ctrl+q 恢复控制台输出 ctrl+l 清屏 ctrl+左右键 在单词之间</description></item><item><title>linux-shell</title><link>/post/linux-shell/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-shell/</guid><description>#!/bin/bash ! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。 chmod +x ./test.sh 使脚本具有执行权限 ./test.sh 执行脚本 注意，一定要写成 ./test.sh ，</description></item><item><title>linux-ssh登录提醒</title><link>/post/linux-ssh%E7%99%BB%E5%BD%95%E6%8F%90%E9%86%92/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-ssh%E7%99%BB%E5%BD%95%E6%8F%90%E9%86%92/</guid><description>sudo apt install heirloom-mailx sudo vim /etc/nail.rc set from=178@sina.cn //发信人邮箱 set smtp=smtps://smtp.sina.com //发信人邮箱的SMTP地址 set smtp-auth-user=178@sina.cn //发信人邮箱登陆账号 set smtp-auth-password=9f8f7149d10d0b1f //发信人邮箱的授权密码 set smtp-auth=login //认证方式 set ssl-verify=ignore /</description></item><item><title>linux-ubuntu软件安装</title><link>/post/linux-ubuntu%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-ubuntu%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</guid><description>分区大小 /boot：这个目录下存放的是Ubuntu的引导项，Ubuntu的启动从这里开始，这里我分配了500MB空间，之后我们的EasyBC</description></item><item><title>linux-vim</title><link>/post/linux-vim/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-vim/</guid><description>搜索 /</description></item><item><title>linux-windows-远程控制ubuntu</title><link>/post/linux-windows-%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6ubuntu/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-windows-%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6ubuntu/</guid><description>使用Xshell连接Ubuntu Ubuntu主机没有开启SSH服务，需要开启openssh-server： sudo apt-get install openssh-server 使用 ps -e | grep ssh 如果只有ss</description></item><item><title>linux-定时任务</title><link>/post/linux-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description>python import os, time while 1: timing = time.strftime(&amp;#39;%H_%M&amp;#39;, time.localtime(time.time())) # print(time.strftime(&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;, time.localtime()) ) if timing == &amp;#39;12_00&amp;#39;: print(&amp;#34;开始运行脚本:&amp;#34;) # runner.run(alltestnames) # 执行测试用例 print(&amp;#34;运行完成退出&amp;</description></item><item><title>linux-微信推送IP地址</title><link>/post/linux-%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81ip%E5%9C%B0%E5%9D%80/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81ip%E5%9C%B0%E5%9D%80/</guid><description>为了使树莓派能够方便的移动到不同的地方，我们设置了动态IP, 而有时需要快速SSH链接树莓派，我们除了可以通过VNC远程桌面查看IP, 还可以通</description></item><item><title>linux-远程主机ip变更邮箱提醒</title><link>/post/linux-%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BAip%E5%8F%98%E6%9B%B4%E9%82%AE%E7%AE%B1%E6%8F%90%E9%86%92/</link><pubDate>Fri, 02 Dec 2022 03:11:14 +0800</pubDate><guid>/post/linux-%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BAip%E5%8F%98%E6%9B%B4%E9%82%AE%E7%AE%B1%E6%8F%90%E9%86%92/</guid><description>import socket import smtplib from email.header import Header from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText from time import asctime def send_an_email(email_content): # email_content是一个字符串 mail_host = &amp;#34;smtp.sina.com&amp;#34; # 这个去邮箱找，这里用的sina邮箱 mail_user = &amp;#39;17839906091@sina.cn&amp;#39; mail_auth_code = &amp;#39;9f8f7149d10d0b1f&amp;#39; mail_sender</description></item><item><title>cv-CNN</title><link>/post/cv-cnn/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-cnn/</guid><description>卷积层 卷积提取底层特征减少神经网络中参数个数 局部连接。⽐起全连接，局部连接会⼤⼤减少⽹络的参数。在⼆维图像中，局部像素的关联性很强， 设计局部</description></item><item><title>cv-CTPN</title><link>/post/cv-ctpn/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-ctpn/</guid><description>CTPN算法 文本通常都是从左往右写的（水平），并且字之间的宽度都大致相同 固定宽度，来检测文本高度即可，但是如何应对变长序列呢？ 本质上还是RP</description></item><item><title>cv-Deeplab</title><link>/post/cv-deeplab/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-deeplab/</guid><description>DeeplabV1 原论文名称：Semantic Image Segmentation with Deep Convolutional Nets and Fully Connected CRFs 论文下载地址：https://arxiv.org/abs/1412.7062 参考源码：ht</description></item><item><title>cv-Inception、Xception</title><link>/post/cv-inceptionxception/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-inceptionxception/</guid><description>如果 ResNet 是为了更深，那么 Inception 家族就是为了更宽。Inception 的作者对训练更大型网络的计算效率尤其感兴趣。换句话说：我们怎样在不增加计算成本的</description></item><item><title>cv-OpenCV</title><link>/post/cv-opencv/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-opencv/</guid><description>图像处理中的坐标系，水平向右为x轴正方向，竖直向下为y轴正方向。 #找源码 grep &amp;#39;COLOR_BGR2RGBA&amp;#39; * -rn | grep &amp;#39;\.hpp&amp;#39; 安装OpenCV-Python, pip install opencv-python==3.4.2.17 要利用SIFT和</description></item><item><title>cv-RCNN</title><link>/post/cv-rcnn/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-rcnn/</guid><description>RCNN Rich feature hierarchies for accurate object detection and semantic segmentation R-CNN存在的问题： 测试速度慢： 测试一张图片约53s(CPU)。用Selective Search:算法提取候选框用时</description></item><item><title>cv-SSD</title><link>/post/cv-ssd/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-ssd/</guid><description>原理 让图片经过卷积神经网络（VGG）提取特征，生成feature map 抽取其中六层的feature map，然后分别在这些feature map层上</description></item><item><title>cv-Swin-Transformer</title><link>/post/cv-swin-transformer/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-swin-transformer/</guid><description>网络整体框架 层次化构建方法（Hierarchical feature maps），比如特征图尺寸中有对图像下采样4倍的，8倍的以及16倍的，这样的backb</description></item><item><title>cv-TensorRT</title><link>/post/cv-tensorrt/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-tensorrt/</guid><description>TensorRT TensorRT支持几乎所有主流深度学习框架，将python框架转换成C++的TensorRT，从而可以加速推理。 算子融合(层与张量融合)</description></item><item><title>cv-Vision Transformer(ViT)</title><link>/post/cv-vision-transformervit/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-vision-transformervit/</guid><description>下图是原论文中给出的关于Vision Transformer(ViT)的模型框架。简单而言，模型由三个模块组成： Linear Projection of Flattened Patches(Emb</description></item><item><title>cv-yolo</title><link>/post/cv-yolo/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-yolo/</guid><description>YOLO vs Faster R-CNN Faster R-CNN将检测结果分为两部分求解：物体类别（分类问题）、物体位置即bounding box（回归问题），YOLO统一为一个回归问题</description></item><item><title>cv-卡号识别</title><link>/post/cv-%E5%8D%A1%E5%8F%B7%E8%AF%86%E5%88%AB/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-%E5%8D%A1%E5%8F%B7%E8%AF%86%E5%88%AB/</guid><description># 导入工具包 from imutils import contours # 也可以用自己写的方法 import numpy as np import argparse import cv2 # 设置参数 ap = argparse.ArgumentParser() ap.add_argument(&amp;#34;-i&amp;#34;, &amp;#34;--image&amp;#34;, default=&amp;#39;./images/1.png&amp;#39;, help=&amp;#34;path to input image&amp;#34;) ap.add_argument(&amp;#34;-t&amp;#34;, &amp;#34;--template&amp;#34;, default=&amp;#39;./images/template.png&amp;#39;, help=&amp;#34;path to template OCR-A image&amp;#34;) ap.add_argument(&amp;#34;-s&amp;#34;, &amp;#34;--save&amp;#34;, default=True, help=&amp;#34;save every image&amp;#34;) args = vars(ap.parse_args()) def cv_show(name, image): cv2.imshow(name, image) cv2.waitKey(0) cv2.destroyAllWindows() # 轮</description></item><item><title>cv-语义分割</title><link>/post/cv-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/cv-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/</guid><description>分割、检测 图像分类：图像中的气球是一个类别。 语义分割：分割出气球和背景。 目标检测：图像中有7个目标气球，并且检测出每个气球的坐标位置。 实例分</description></item><item><title>linux-Hadoop环境</title><link>/post/linux-hadoop%E7%8E%AF%E5%A2%83/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/linux-hadoop%E7%8E%AF%E5%A2%83/</guid><description>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-3.4.3.tgz tar -xf mongodb-linux-x86_64-rhel62-3.4.3.tgz -C ~/ mv mongodb-linux-x86_64-rhel62-3.4.3/ /usr/local/mongodb // 在安装目录下创建 data 文件夹用于存放数据和日志 mkdir /usr/local/mongodb/data/ // 在 data 文件夹下创建 db 文件夹，用于存放数据 mkdir /usr/local/mongodb/data/db/ // 在 data 文件夹下创建 logs 文件夹，</description></item><item><title>linux-显卡安装驱动</title><link>/post/ml-gpu%E7%89%88pytorch%E5%AE%89%E8%A3%85/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-gpu%E7%89%88pytorch%E5%AE%89%E8%A3%85/</guid><description>驱动安装 #https://www.nvidia.cn/geforce/drivers/ #查看显卡型号 lspci | grep -i nvidia #安装驱动 sudo bash NVIDIA-Linux-x86_64-455.23.04.run #查看显卡信息 nvidia-smi 卸载显卡驱动重新安装 #命令行界面 Ctrl+Alt+F1 sudo apt-get --purge remove nvidia* sudo apt autoremove # To remove CUDA Toolkit: sudo apt-get --purge remove &amp;#34;*cublas*&amp;#34; &amp;#34;cuda*&amp;#34; #</description></item><item><title>ml-Attention机制</title><link>/post/ml-attention%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-attention%E6%9C%BA%E5%88%B6/</guid><description>https://github.com/CyberZHG/keras-self-attention/blob/master/README.zh-CN.md https://github.com/CyberZHG/keras-self-attention/blob/master/keras_self_attention/seq_self_attention.py 用Attention机制的原因是考虑到RNN（或者LSTM，GRU等）的计算限制为是顺序的，也就是说RNN相关算法只能从左向右依次计算或</description></item><item><title>ml-gpu版pytorch安装</title><link>/post/linux-%E6%98%BE%E5%8D%A1%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/linux-%E6%98%BE%E5%8D%A1%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/</guid><description>驱动安装 #https://www.nvidia.cn/geforce/drivers/ #查看显卡型号 lspci | grep -i nvidia #安装驱动 sudo bash NVIDIA-Linux-x86_64-455.23.04.run #查看显卡信息 nvidia-smi 卸载显卡驱动重新安装 #命令行界面 Ctrl+Alt+F1 sudo apt-get --purge remove nvidia* sudo apt autoremove # To remove CUDA Toolkit: sudo apt-get --purge remove &amp;#34;*cublas*&amp;#34; &amp;#34;cuda*&amp;#34; #</description></item><item><title>ml-infoGAN</title><link>/post/ml-infogan/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-infogan/</guid><description>InfoGAN的发布时间应该在是DCGAN之后没多久，可以算是在大部分的GAN模型的前面的。时间上看，InfoGAN应该是在Semi-GAN</description></item><item><title>ml-Jupyter-Notebook</title><link>/post/ml-jupyter-notebook/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-jupyter-notebook/</guid><description>安装 jupyter conda install ipython conda install jupyter 换主题 pip install jupyterthemes 查看可用的 Jupyter 主题 jt -l 更换 Jupyter 主题 jt -t onedork -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T -T -m 10 -t 主题 -f(字体) -fs(字体大小) -cell</description></item><item><title>ml-keras</title><link>/post/ml-keras/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-keras/</guid><description>tensorboard writer=tf.summary.FileWriter(&amp;#39;/path/to/logs&amp;#39;, tf.get_default_graph()) writer.close() 在上面程序的8、9行中，创建一个writer，将tensorboard summary写入文件夹/path/to/logs， 然后运行上</description></item><item><title>ml-keras-utils-plot_model报错</title><link>/post/ml-keras-utils-plot_model%E6%8A%A5%E9%94%99/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-keras-utils-plot_model%E6%8A%A5%E9%94%99/</guid><description>OSError: pydot failed to call GraphViz.Please install GraphViz ( https://www.graphviz.org/ ) and ensure that its executables are in the $PATH. 或 Failed to import pydot. You must install pydot and graphviz win10 ####1.安装 GraphViz 下载msi文件安装 与python关联 pip install graphviz ####2.添加</description></item><item><title>ml-pytorch</title><link>/post/ml-pytorch/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-pytorch/</guid><description>1.安装 https://pytorch.org pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # ２.基础 创建一个 5x3 矩阵, 但是未初始化: torch.empty(5, 3) 创建一个随机初始化的矩阵: torch.rand(5, 3) 创建一个0填充的矩阵，数据类型为long torch.zeros(5, 3, dtype=torch.long)</description></item><item><title>ml-Seq2Seq-模型及-Attention-机制</title><link>/post/ml-seq2seq-%E6%A8%A1%E5%9E%8B%E5%8F%8A-attention-%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-seq2seq-%E6%A8%A1%E5%9E%8B%E5%8F%8A-attention-%E6%9C%BA%E5%88%B6/</guid><description>什么是 Seq2Seq ？ Seq2Seq 任务指的是输入和输出都是序列的任务。例如说英语翻译成中文。 Seq2Seq任务最常见的是使用Encoder+Decoder的模式。</description></item><item><title>ml-sklearn</title><link>/post/ml-sklearn/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-sklearn/</guid><description>中文手册 英文手册 在Sklearn当中有三大模型：Transformer 转换器、Estimator 估计器、Pipeline 管道 估计器 (estimator) 可以基于</description></item><item><title>ml-Tensorflow官方debug--tfdbg</title><link>/post/ml-tensorflow%E5%AE%98%E6%96%B9debug--tfdbg/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-tensorflow%E5%AE%98%E6%96%B9debug--tfdbg/</guid><description>example code： import numpy as np import tensorflow as tf from tensorflow.python import debug as tf_debug xs = np.linspace(-0.5, 0.49, 100) x = tf.placeholder(tf.float32, shape=[None], name=&amp;#34;x&amp;#34;) y = tf.placeholder(tf.float32, shape=[None], name=&amp;#34;y&amp;#34;) k = tf.Variable([0.0], name=&amp;#34;k&amp;#34;) y_hat = tf.multiply(k, x, name=&amp;#34;y_hat&amp;#34;) sse = tf.reduce_sum((y - y_hat) * (y - y_hat), name=&amp;#34;sse&amp;#34;) train_op = tf.train.GradientDescentOptimizer(learning_rate=0.02).minimize(sse) sess = tf.Session() sess.run(tf.global_variables_initializer()) sess = tf_debug.LocalCLIDebugWrapperSession(sess,ui_type=&amp;#34;readline&amp;#34;) for _ in range(10): sess.run(y_hat,feed_dict={x:xs,y:10*xs}) sess.run(train_op,</description></item><item><title>ml-插值</title><link>/post/ml-%E6%8F%92%E5%80%BC/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-%E6%8F%92%E5%80%BC/</guid><description>一维插值 插值不同于拟合。插值函数经过样本点，拟合函数一般基于最小二乘法尽量靠近所有样本点穿过。常见插值方法有拉格朗日插值法、分段插值法、样条</description></item><item><title>ml-迁移学习(Transfer-Learning)</title><link>/post/ml-%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0transfer-learning/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0transfer-learning/</guid><description>训练复杂的卷积神经网络需要非常多的标注数据。 所谓迁移学习，就是讲一个问题上训练好的模型通过简单的调整使其适用于一个新的问题。 根据论文DeCA</description></item><item><title>ml-生成对抗网络(GAN)</title><link>/post/ml-%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9Cgan/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9Cgan/</guid><description>Goodfellow的Generative Adversarial Networks https://arxiv.org/abs/1406.2661 本质上， GAN 目标是训练出一个好的生成模型，来模拟训练集中的数据。不同的是， 一般的生成模型，必须</description></item><item><title>ml-循环神经网络(RNN)</title><link>/post/ml-%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crnn/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Crnn/</guid><description>RNN 神经网络只能单独的取处理一个个的输入，前一个输入和后一个输入是完全没有关系的。但是，某些任务需要能够更好的处理序列的信息，即前面的输入和后</description></item><item><title>ml-自动机器学习</title><link>/post/ml-%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/ml-%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</guid><description>AutoKeras是一个开源的，基于 Keras 的新型 AutoML 库。AutoKeras 是一个用于自动化机器学习的开源软件库，提供自动搜索深度学习模型的架构和超</description></item><item><title>面试-leetcode 热题100</title><link>/post/%E9%9D%A2%E8%AF%95-leetcode-%E7%83%AD%E9%A2%98100/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-leetcode-%E7%83%AD%E9%A2%98100/</guid><description>leetcode 热题100 第一周，链表、栈、队列 第一天：链表（周三） 1、 链表的基础知识：单链表 2、 反转链表（ LeetCode 206 ） 3、 相交链表（ LeetCode 160 ） 4、 合并两个有序链表</description></item><item><title>面试-leetcode分类</title><link>/post/%E9%9D%A2%E8%AF%95-leetcode%E5%88%86%E7%B1%BB/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-leetcode%E5%88%86%E7%B1%BB/</guid><description>数据结构与算法简介、LeetCode 入门及攻略（1 天） 数据结构与算法 算法复杂度 LeetCode 入门与攻略 0001. 两数之和 1929. 数组串联 0771. 宝石与石头 数组基础（2 天） 数</description></item><item><title>面试-leetcode面试top100</title><link>/post/%E9%9D%A2%E8%AF%95-leetcode%E9%9D%A2%E8%AF%95top100/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-leetcode%E9%9D%A2%E8%AF%95top100/</guid><description>汇总 (10 封私信) 互联网公司最常见的面试算法题有哪些？ - 知乎 (zhihu.com) 模拟 134. 加油站 在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。 你有一辆油箱容量</description></item><item><title>面试-ML</title><link>/post/%E9%9D%A2%E8%AF%95-ml/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-ml/</guid><description>激活函数 需要激活函数来引入非线性因素，使得神经网络可以任意逼近任何非线性函数。 relu计算量小，可以防止梯度消失 softmax函数，又称归一</description></item><item><title>面试-mysql</title><link>/post/%E9%9D%A2%E8%AF%95-mysql/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-mysql/</guid><description>[TOC] 安装 win https://dev.mysql.com/downloads/mysql/ http://mirrors.sohu.com/mysql/MySQL-8.0/ 配置环境变量path 新建一个my.ini 用记事本打开 [mysqld] # 设置mysql的安装目录 basedir=D:\\software\\java\\mysql-5.7.28-winx64 # 切记此处一定要用双斜杠\\，单斜杠这里会出错</description></item><item><title>面试-MySQL题</title><link>/post/%E9%9D%A2%E8%AF%95-mysql%E9%A2%98/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-mysql%E9%A2%98/</guid><description>数据库事务ACID四大特性 “一致性”为最终目标，其他特性都是为达到这个目标而采取的措施和手段。 原子性：事务中包括的所有操作要么都做，要么都不</description></item><item><title>面试-Normalize</title><link>/post/%E9%9D%A2%E8%AF%95-normalize/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-normalize/</guid><description>Batch Normalization（BN，2015年） Layer Normalization（LN，2016年） Instance Normalization（IN，2017</description></item><item><title>面试-标准化、归一化、正则化</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%A0%87%E5%87%86%E5%8C%96%E5%BD%92%E4%B8%80%E5%8C%96%E6%AD%A3%E5%88%99%E5%8C%96/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%A0%87%E5%87%86%E5%8C%96%E5%BD%92%E4%B8%80%E5%8C%96%E6%AD%A3%E5%88%99%E5%8C%96/</guid><description>瘦长的椭圆，会导致趋向最值时梯度下降的震荡；所以需要缩放特征值，使得其取值范围相近。按经验，特征缩放到3倍或1/3是比较可以接受的。 标准化（</description></item><item><title>面试-方差、偏差、过拟合与欠拟合</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%96%B9%E5%B7%AE%E5%81%8F%E5%B7%AE%E8%BF%87%E6%8B%9F%E5%90%88%E4%B8%8E%E6%AC%A0%E6%8B%9F%E5%90%88/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%96%B9%E5%B7%AE%E5%81%8F%E5%B7%AE%E8%BF%87%E6%8B%9F%E5%90%88%E4%B8%8E%E6%AC%A0%E6%8B%9F%E5%90%88/</guid><description>过拟合是指模型对于训练数据拟合呈过当的情况，反映到评估指标上，就是模型在训练集上的表现很好，但在测试集和新数据上的表现较差。欠拟合指的是模型</description></item><item><title>面试-激活、损失函数</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%BF%80%E6%B4%BB%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%BF%80%E6%B4%BB%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</guid><description>激活函数 如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，无论你神经网</description></item><item><title>面试-计算量和参数量</title><link>/post/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E9%87%8F%E5%92%8C%E5%8F%82%E6%95%B0%E9%87%8F/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E8%AE%A1%E7%AE%97%E9%87%8F%E5%92%8C%E5%8F%82%E6%95%B0%E9%87%8F/</guid><description>FLOPS，即每秒浮点操作次数FLoating point OPerations per Second这个指标来衡量GPU的运算能力。 MACC，即乘加数Multiply-ACCu</description></item><item><title>面试-技术问题</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/</guid><description>排序算法 不稳定：快选堆希 O(n*log2n) 快归堆希 1.插入排序 ： 从第二个元素开始，每轮，已排序后面的元素向前比较，找到比他小或相等的元素，放到其后面 2.冒泡</description></item><item><title>面试-距离、相似度计算——欧氏距离,曼哈顿距离,闵可夫斯基距离,汉明距离,夹角余弦</title><link>/post/%E9%9D%A2%E8%AF%95-%E8%B7%9D%E7%A6%BB%E7%9B%B8%E4%BC%BC%E5%BA%A6%E8%AE%A1%E7%AE%97%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E8%B7%9D%E7%A6%BB%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E5%A4%B9%E8%A7%92%E4%BD%99%E5%BC%A6/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E8%B7%9D%E7%A6%BB%E7%9B%B8%E4%BC%BC%E5%BA%A6%E8%AE%A1%E7%AE%97%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E8%B7%9D%E7%A6%BB%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E5%A4%B9%E8%A7%92%E4%BD%99%E5%BC%A6/</guid><description>在机器学习领域，被俗称为距离，却不满足三条距离公理的不仅仅有余弦距离（满足正定性和对称性，但是不满足三角不等式)，还有KL距离（ Kulback- Leibler Dive</description></item><item><title>面试-面试3（计算机基础）</title><link>/post/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%953%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%953%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</guid><description>顺序表（线性表）可随机存储，存储密度大（无指针）。 单链表（线性表）顺序存储，非连续存储空间，更容易表示逻辑结构。 n个元素进栈，共有$\fra</description></item><item><title>面试-面试问题</title><link>/post/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid><description>别说自己有什么，说你能给公司带来什么 表达对岗位特别感兴趣，甚至直接说要你你就去 每次面试一定要录音！！！ 之后再把自己的回答整理出QA,不断的修</description></item><item><title>面试-模型调参</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%8F%82/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%8F%82/</guid><description>贪心调参 （坐标下降） 所谓贪心算法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，它所做出的仅仅是在某</description></item><item><title>面试-模型评估指标</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/</guid><description>回归 RMSE（Root Mean Square Error）均方根误差 衡量观测值与真实值之间的偏差。常用来作为机器学习模型预测结果衡量的标准。如果存在个别偏离程度</description></item><item><title>面试-模型融合</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%A8%A1%E5%9E%8B%E8%9E%8D%E5%90%88/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%A8%A1%E5%9E%8B%E8%9E%8D%E5%90%88/</guid><description>简单加权融合 回归： 算术平均融合（Arithmetic mean） 加权算术平均法 几何平均融合（Geometric mean） 分类： 投票（Votin</description></item><item><title>面试-排序算法</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid><description>排序算法 平均时间复杂度 最好/差时间复杂度 空间复杂度 数据对象稳定性 冒泡排序 O(n2) O(n)/O(n2) O(1) 稳定 选择排序 O(n2) O(n2)/O(n2) O(1) 不稳定 插入排序 O(n2) O(n)/O(n2) O(1) 稳定 希尔排序 O(n^(1.3-2)) O(1) 不稳定 快</description></item><item><title>面试-缺失值处理</title><link>/post/%E9%9D%A2%E8%AF%95-%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%A4%84%E7%90%86/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%A4%84%E7%90%86/</guid><description>删除 样本数据量十分大且缺失值不多的情况下非常有效，但如果样本量本身不大且缺失也不少，那么不建议使用。 #删除数据表中含有空值的行 df.dropna(how=&amp;#39;any&amp;#39;) 不处理 补齐处</description></item><item><title>面试-数据分析指标</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8C%87%E6%A0%87/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8C%87%E6%A0%87/</guid><description>DAU(Daily Active Users) DNU(Daily New Users) ARPU(Average Revenue per User) ARPPU(Average Revenue per Paying User) APA (Active Payment Account) ROI(投资回报率） = $（收入－成本）／投入＊100% $ 它所表达的是 收回了多少，而非利润，更准确点说就</description></item><item><title>面试-数据集的划分</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%88%92%E5%88%86/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%88%92%E5%88%86/</guid><description>Holdout检验 按一定比例划分为训练集和测试集 这种方法也称为保留法。我们通常取8-2、7-3、6-4、5-5比例切分，直接将数据随机划分为</description></item><item><title>面试-数据结构算法</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/</guid><description>数组 优点：找到某一下下标（index)的元素所需时间O(1) 缺点：需要分配连续空间；查询需要遍历整个数组时间为 O(n)；删除添加时间O(n)</description></item><item><title>面试-数据挖掘步骤</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AD%A5%E9%AA%A4/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AD%A5%E9%AA%A4/</guid><description/></item><item><title>面试-数据预处理</title><link>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</guid><description>import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import missingno as msno # 用于可视化缺失值分布 import scipy.stats as st 预览数据： 读入外部数据 data = pd.read_excel(io=r'C:\Users\Administrator\Desktop\datas\data.xlsx') dataset = pd.read_csv('../datasets/Data.csv') 查看数据的规模 data.shape 预览数据 data.head().append(data.tail()) edu各种</description></item><item><title>面试-特征构造、选择</title><link>/post/%E9%9D%A2%E8%AF%95-%E7%89%B9%E5%BE%81%E6%9E%84%E9%80%A0%E9%80%89%E6%8B%A9/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E7%89%B9%E5%BE%81%E6%9E%84%E9%80%A0%E9%80%89%E6%8B%A9/</guid><description>特征构造 统计量特征：计数、求和、比例、标准差等 时间特征：相对时间、绝对时间，节假日，双休日等 地理信息：分桶 非线性变换：取log、平方、根号 数</description></item><item><title>面试-异常处理</title><link>/post/%E9%9D%A2%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>异常值检测特征分为类别特征和数字特征 数字特征 相关性分析、查看特征的偏度和峰度、数字特征相互之间的关系可视化、多变量互相回归关系可视化、数字特</description></item><item><title>面试-异常值检测</title><link>/post/%E9%9D%A2%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%80%BC%E6%A3%80%E6%B5%8B/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E5%BC%82%E5%B8%B8%E5%80%BC%E6%A3%80%E6%B5%8B/</guid><description>简单统计 df.describe() 散点图 3∂原则 这个原则有个条件：数据需要服从正态分布。在3∂原则下，异常值如超过3倍标准差，那么可以将其视为异常值。正负3∂的概率</description></item><item><title>面试-优化算法</title><link>/post/%E9%9D%A2%E8%AF%95-%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 01 Dec 2022 19:59:47 +0800</pubDate><guid>/post/%E9%9D%A2%E8%AF%95-%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</guid><description>主要有三大类： 基本梯度下降法，包括 GD，BGD，SGD； 动量优化法，包括 Momentum，NAG 等； 自适应学习率优化法，包括 Adam，Ada</description></item></channel></rss>